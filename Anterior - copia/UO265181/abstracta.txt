CATEGORIES
def, statement, type, exp

NODES
program -> def*;

varDef:def -> name:string type;

intType:type -> ;
floatType:type -> ;
charType:type -> ;
arrayType:type -> size:string type;
structType:type -> name:string;


structDef:def -> name:string record*;

record -> name:string type;

funcDef:def -> name:string params:varDef* type varDef* statement*;

assignment:statement -> left:exp right:exp;
return:statement -> exp;
print:statement -> exp;
printsp:statement -> exp;
println:statement -> exp;
read:statement -> exp;
while:statement -> condition:exp statement*;
if:statement -> condition:exp ifst:statement* elsest:statement*;
funcStatement:statement -> name:string params:exp*;



arithmeticExpression:exp -> left:exp operator:string right:exp;
relationalExpression:exp -> left:exp operator:string right:exp;
logicalExpression:exp -> left:exp operator:string right:exp;
cast:exp -> type exp;
funcExp:exp -> name:string params:exp*;
structAccess:exp -> struct:exp name:string;
arrayAccess:exp -> array:exp index:exp;
variable:exp -> name:string;
intConstant:exp -> value:string;
realConstant:exp -> value:string;
charConstant:exp -> value:string;
