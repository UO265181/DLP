/**
 * @generated VGen (for ANTLR) 1.7.2
 */


// package <nombre paquete>;

import ast.*;

/*
Plantilla para Visitors.
Para crear un nuevo Visitor cortar y pegar este código y ya se tendría un visitor que compila y
que al ejecutarlo recorrería todo el árbol (sin hacer nada aún en él).
Solo quedaría añadir a cada método visit aquello adicional que se quiera realizar sobre su nodo del AST.
*/

public class <nombre clase> extends DefaultVisitor {

	// ---------------------------------------------------------
	// Tareas a realizar en cada método visit:
	//
	// Si en algún método visit NO SE QUIERE HACER NADA más que recorrer los hijos entonces se puede
	// borrar (dicho método se heredaría de DefaultVisitor con el código de recorrido).
	//
	// Lo siguiente es para cuando se quiera AÑADIR alguna funcionalidad adicional a un visit:
	//
	// - El código que aparece en cada método visit es aquel que recorre los hijos. Es el mismo código
	//		que está implementado en el padre (DefaultVisitor). Por tanto la llamada a 'super.visit' y el
	//		resto del código del método hacen lo mismo (por ello 'super.visit' está comentado).
	//
	// - Lo HABITUAL será borrar todo el código de recorrido dejando solo la llamada a 'super.visit'. De esta
	//		manera, cada método visit se puede centrar en la tarea que tiene que realizar sobre su nodo del AST
    //      (dejando que el padre se encargue del recorrido de los hijos).
	//
	// - La razón de que aparezca el código de recorrido de los hijos es por si se necesita realizar alguna
	//		tarea DURANTE el mismo (por ejemplo ir comprobando su tipo). En este caso, ya se tiene implementado
	//		dicho recorrido y solo habría que incrustar las acciones adicionales en el mismo. En este caso,
	//		es la llamada a 'super.visit' la que debería ser borrada.
	// ---------------------------------------------------------

	//	class Program { List<Def> def; }
	public Object visit(Program node, Object param) {

		// super.visit(node, param);

		if (node.getDef() != null)
			for (Def child : node.getDef())
				child.accept(this, param);

		return null;
	}

	//	class VarDef { String name;  Type type; }
	public Object visit(VarDef node, Object param) {

		// super.visit(node, param);

		if (node.getType() != null)
			node.getType().accept(this, param);

		return null;
	}

	//	class IntType {  }
	public Object visit(IntType node, Object param) {
		return null;
	}

	//	class FloatType {  }
	public Object visit(FloatType node, Object param) {
		return null;
	}

	//	class CharType {  }
	public Object visit(CharType node, Object param) {
		return null;
	}

	//	class ArrayType { String size;  Type type; }
	public Object visit(ArrayType node, Object param) {

		// super.visit(node, param);

		if (node.getType() != null)
			node.getType().accept(this, param);

		return null;
	}

	//	class StructType { String name; }
	public Object visit(StructType node, Object param) {
		return null;
	}

	//	class StructDef { String name;  List<Record> record; }
	public Object visit(StructDef node, Object param) {

		// super.visit(node, param);

		if (node.getRecord() != null)
			for (Record child : node.getRecord())
				child.accept(this, param);

		return null;
	}

	//	class Record { String name;  Type type; }
	public Object visit(Record node, Object param) {

		// super.visit(node, param);

		if (node.getType() != null)
			node.getType().accept(this, param);

		return null;
	}

	//	class FuncDef { String name;  List<VarDef> params;  Type type;  List<VarDef> vardef;  List<Statement> statement; }
	public Object visit(FuncDef node, Object param) {

		// super.visit(node, param);

		if (node.getParams() != null)
			for (VarDef child : node.getParams())
				child.accept(this, param);

		if (node.getType() != null)
			node.getType().accept(this, param);

		if (node.getVardef() != null)
			for (VarDef child : node.getVardef())
				child.accept(this, param);

		if (node.getStatement() != null)
			for (Statement child : node.getStatement())
				child.accept(this, param);

		return null;
	}

	//	class Assignment { Exp left;  Exp right; }
	public Object visit(Assignment node, Object param) {

		// super.visit(node, param);

		if (node.getLeft() != null)
			node.getLeft().accept(this, param);

		if (node.getRight() != null)
			node.getRight().accept(this, param);

		return null;
	}

	//	class Return { Exp exp; }
	public Object visit(Return node, Object param) {

		// super.visit(node, param);

		if (node.getExp() != null)
			node.getExp().accept(this, param);

		return null;
	}

	//	class Print { Exp exp; }
	public Object visit(Print node, Object param) {

		// super.visit(node, param);

		if (node.getExp() != null)
			node.getExp().accept(this, param);

		return null;
	}

	//	class Printsp { Exp exp; }
	public Object visit(Printsp node, Object param) {

		// super.visit(node, param);

		if (node.getExp() != null)
			node.getExp().accept(this, param);

		return null;
	}

	//	class Println { Exp exp; }
	public Object visit(Println node, Object param) {

		// super.visit(node, param);

		if (node.getExp() != null)
			node.getExp().accept(this, param);

		return null;
	}

	//	class Read { Exp exp; }
	public Object visit(Read node, Object param) {

		// super.visit(node, param);

		if (node.getExp() != null)
			node.getExp().accept(this, param);

		return null;
	}

	//	class While { Exp condition;  List<Statement> statement; }
	public Object visit(While node, Object param) {

		// super.visit(node, param);

		if (node.getCondition() != null)
			node.getCondition().accept(this, param);

		if (node.getStatement() != null)
			for (Statement child : node.getStatement())
				child.accept(this, param);

		return null;
	}

	//	class If { Exp condition;  List<Statement> ifst;  List<Statement> elsest; }
	public Object visit(If node, Object param) {

		// super.visit(node, param);

		if (node.getCondition() != null)
			node.getCondition().accept(this, param);

		if (node.getIfst() != null)
			for (Statement child : node.getIfst())
				child.accept(this, param);

		if (node.getElsest() != null)
			for (Statement child : node.getElsest())
				child.accept(this, param);

		return null;
	}

	//	class FuncStatement { String name;  List<Exp> params; }
	public Object visit(FuncStatement node, Object param) {

		// super.visit(node, param);

		if (node.getParams() != null)
			for (Exp child : node.getParams())
				child.accept(this, param);

		return null;
	}

	//	class ArithmeticExpression { Exp left;  String operator;  Exp right; }
	public Object visit(ArithmeticExpression node, Object param) {

		// super.visit(node, param);

		if (node.getLeft() != null)
			node.getLeft().accept(this, param);

		if (node.getRight() != null)
			node.getRight().accept(this, param);

		return null;
	}

	//	class RelationalExpression { Exp left;  String operator;  Exp right; }
	public Object visit(RelationalExpression node, Object param) {

		// super.visit(node, param);

		if (node.getLeft() != null)
			node.getLeft().accept(this, param);

		if (node.getRight() != null)
			node.getRight().accept(this, param);

		return null;
	}

	//	class LogicalExpression { Exp left;  String operator;  Exp right; }
	public Object visit(LogicalExpression node, Object param) {

		// super.visit(node, param);

		if (node.getLeft() != null)
			node.getLeft().accept(this, param);

		if (node.getRight() != null)
			node.getRight().accept(this, param);

		return null;
	}

	//	class Cast { Type newType;  Exp exp; }
	public Object visit(Cast node, Object param) {

		// super.visit(node, param);

		if (node.getNewType() != null)
			node.getNewType().accept(this, param);

		if (node.getExp() != null)
			node.getExp().accept(this, param);

		return null;
	}

	//	class FuncExp { String name;  List<Exp> params; }
	public Object visit(FuncExp node, Object param) {

		// super.visit(node, param);

		if (node.getParams() != null)
			for (Exp child : node.getParams())
				child.accept(this, param);

		return null;
	}

	//	class StructAccess { Exp struct;  String name; }
	public Object visit(StructAccess node, Object param) {

		// super.visit(node, param);

		if (node.getStruct() != null)
			node.getStruct().accept(this, param);

		return null;
	}

	//	class ArrayAccess { Exp array;  Exp index; }
	public Object visit(ArrayAccess node, Object param) {

		// super.visit(node, param);

		if (node.getArray() != null)
			node.getArray().accept(this, param);

		if (node.getIndex() != null)
			node.getIndex().accept(this, param);

		return null;
	}

	//	class Variable { String name; }
	public Object visit(Variable node, Object param) {
		return null;
	}

	//	class IntConstant { String value; }
	public Object visit(IntConstant node, Object param) {
		return null;
	}

	//	class RealConstant { String value; }
	public Object visit(RealConstant node, Object param) {
		return null;
	}

	//	class CharConstant { String value; }
	public Object visit(CharConstant node, Object param) {
		return null;
	}
}
