CATEGORIES
definition, sentence, expression, type

NODES
program -> definitions:definition*;

definitionVariable:definition -> name:string type;
definitionStruct:definition -> name:string structFields:definitionVariable*;
definitionFunction:definition -> name:string definitionFunctionParams:definitionVariable* type localVariables:definitionVariable* sentences:sentence*;

typeInt:type -> ;
typeFloat:type -> ;
typeChar:type -> ;
typeArray:type -> size:string type;
typeStruct:type -> name:string;

print:sentence -> expression;
printsp:sentence -> expression;
println:sentence -> expression;
return:sentence -> expression;
read:sentence -> expression;
assignment:sentence -> left:expression right:expression;
sentenceCallFunction:sentence -> name:string callFunctionParams:expression*;
if:sentence -> condition:expression ifSentences:sentence* elseSentences:sentence*;
while:sentence -> condition:expression sentences:sentence*;

constantInt:expression -> value:string;
constantFloat:expression -> value:string;
constantChar:expression -> value:string;
expressionCallFunction:expression -> name:string callFunctionParams:expression*;
accessVariable:expression -> name:string;
accessStructField:expression -> struct:expression name:string;
accessArray:expression -> array:expression index:expression;
unaryExpression:expression -> operator:string expression;
cast:expression -> type expression;
arithmeticExpression:expression -> left:expression operator:string right:expression;
relationalExpression:expression -> left:expression operator:string right:expression;
logicalExpression:expression -> left:expression operator:string right:expression;
