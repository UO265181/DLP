CATEGORIES
definition, sentence, expression, type, access

NODES
program -> definitions:definition*;

definitionVariable:definition -> name:string type;
definitionStruct:definition -> name:string structFields:structField*;
definitionFunction:definition -> name:string definitionFunctionParams:definitionVariable* type localVariables:definitionVariable* sentences:sentence*;

structField -> name:string type;

typeInt:type -> ;
typeFloat:type -> ;
typeChar:type -> ;
typeVoid:type -> ;
typeArray:type -> size:expressionConstantInt type;
typeStruct:type -> name:string;

sentencePrint:sentence -> expression;
sentencePrintsp:sentence -> expression;
sentencePrintln:sentence -> expression;
sentenceReturn:sentence -> expression;
sentenceRead:sentence -> expression;
sentenceAssignment:sentence -> left:access right:expression;
sentenceCallFunction:sentence -> name:string callFunctionParams:expression*;
sentenceIf:sentence -> condition:expression ifSentences:sentence* elseSentences:sentence*;
sentenceWhile:sentence -> condition:expression sentences:sentence*;

expressionConstantInt:expression -> value:string;
expressionConstantFloat:expression -> value:string;
expressionConstantChar:expression -> value:string;
expressionCallFunction:expression -> name:string callFunctionParams:expression*;
expressionUnary:expression -> operator:string expression;
expressionCast:expression -> newType:type expression;
expressionArithmetic:expression -> left:expression operator:string right:expression;
expressionRelational:expression -> left:expression operator:string right:expression;
expressionLogical:expression -> left:expression operator:string right:expression;
expressionAccessVariable:expression, access -> name:string;
expressionAccessStructField:expression, access -> struct:access name:string;
expressionAccessArray:expression, access -> array:access index:expression;