CATEGORIES
definition, sentence, expression, type, access

NODES
program -> definitions:definition*;


definitionVariable:definition -> name:string type;

definitionStruct:definition -> name:string structFields:structField*;
structField -> name:string type;

definitionFunction:definition -> name:string definitionFunctionParams:definitionFunctionParam* type localVariables:localVariable* sentences:sentence*;
definitionFunctionParam -> name:string type;

localVariable -> name:string type;


typeInt:type -> ;
typeFloat:type -> ;
typeChar:type -> ;
typeArray:type -> size:string type;
typeStruct:type -> name:string;


print:sentence -> expression;
printsp:sentence -> expression;
println:sentence -> expression;
return:sentence -> expression;
read:sentence -> expression;
assignment:sentence -> left:expression right:expression;
sentenceCallFunction:sentence -> name:string callFunctionParams:callFunctionParam*;
if:sentence -> condition:expression ifSentences:sentence* elseSentences:sentence*;
while:sentence -> condition:expression sentences:sentence*;

callFunctionParam -> expression;



constantInt:expression -> value:string;
constantFloat:expression -> value:string;
constantChar:expression -> value:string;
expressionCallFunction:expression -> name:string callFunctionParams:callFunctionParam*;
accessVariable:expression -> name:string;
accessStructField:expression -> expression name:string;
accessArray:expression -> expression index:expression;
unaryExpression:expression -> operator:string expression;
cast:expression -> type expression;
arithmeticExpression:expression -> left:expression operator:string right:expression;
comparationExpression:expression -> left:expression operator:string right:expression;
logicExpression:expression -> left:expression operator:string right:expression;
